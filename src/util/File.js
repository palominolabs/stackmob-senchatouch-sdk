/**
 * Copyright 2012-2013 Palomino Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A singleton class for converting between native File objects, data URIs, and the representation used by StackMob
 * ... for binary fields.
 *
 * @author Tyler Wolf
 */
Ext.define('Ux.palominolabs.stackmob.util.File', {
    singleton: true,

    /**
     * Asynchronously reads a native File into a data URL.
     * @param {File} nativeFile The file to read
     * @param {Function} [successCallback] Callback to be executed on successful read
     * The callback is passed the following parameters:
     * @param {String} [successCallback.dataUrl] The result of reading the file
     * @param {FileReader} [successCallback.fileReader] The file reader
     * @param {File} [successCallback.nativeFile] The native file
     * @param {Function} [failureCallback] Callback to be execute on failed read
     * The callback is passed the following parameters:
     * @param {DOMError} [failureCallback.error] The error
     * @param {FileReader} [failureCallback.fileReader] The file reader
     * @param {File} [failureCallback.nativeFile] The native file
     */
    readFile: function (nativeFile, successCallback, failureCallback) {
        var fileReader = new FileReader();

        // Attach the success callback (if any)
        if (Ext.isFunction(successCallback)) {
            fileReader.onload = (function (theFile) {
                return function (e) {
                    successCallback.call(this, fileReader.result, fileReader, nativeFile);
                };
            })(nativeFile);
        }

        // Attach the failure callback (if any)
        if (Ext.isFunction(failureCallback)) {
            fileReader.onerror = (function (theFile) {
                return function (e) {
                    failureCallback.call(this, fileReader.error, fileReader, nativeFile);
                };
            })(nativeFile);
        }

        // Asynchronously read the file
        fileReader.readAsDataURL(nativeFile);
    },

    /**
     * Embeds the filename of the file into the metadata of the given data URL.  This is non-standard, but seems
     * ... to be tolerated by most browsers.  This allows us to store files in a format which is usable by the
     * ... browser (e.g., in an img src), while still containing the complete set of information necessary to
     * ... upload the file to StackMob.
     * @param {String} filename The filename of the file
     * @param {String} dataUrl The standard data URL
     * @returns {string} The data URL with the given filename embedded in the metadata
     */
    embedFilenameInDataUrl: function (filename, dataUrl) {
        // The standard data URL format is
        //     data:[<MIME-type>][;charset=<encoding>][;base64],<data>
        // ... and we wish to produce
        //     data:[<MIME-type>][;charset=<encoding>][;base64];stackmob-filename=<filename>,<data>
        var dataUrlRegex = /^data:(.*),([^,]*)$/,
            dataUrlRegexMatches = dataUrlRegex.exec(dataUrl),
            metaDataStr = '',
            encodedData = '';

        if (dataUrlRegexMatches) {
            metaDataStr = dataUrlRegexMatches[1];
            encodedData = dataUrlRegexMatches[2];
        }

        // Append a custom filename metadata component to the string of metadata in the data URL
        metaDataStr += ';stackmob-filename=' + Ext.String.htmlEncode(filename);

        return 'data:' + metaDataStr + ',' + encodedData;
    },

    /**
     * Tests whether the given string is a data URL of the form produced by
     * ... {@link Ux.palominolabs.stackmob.util.File.embedFilenameInDataUrl embedFilenameInDataUrl}
     * @param {String} dataUrl The data URL to test
     * @returns {boolean} True iff the format matches
     */
    isDataUrlWithFilename: function (dataUrl) {
        return /^data:.*;stackmob-filename=[^,]+,.+$/.test(dataUrl);
    },

    /**
     * Given a data URL with an embedded filename (of the form generated by
     * ... {@link Ux.palominolabs.stackmob.util.File.embedFilenameInDataUrl embedFilenameInDataUrl}), this method
     * ... generates the MIME document required by StackMob to update binary fields (see
     * ... {@link Ux.palominolabs.stackmob.util.File.assembleStackMobFileData assembleStackMobFileData}).
     * @param {String} dataUrlWithFilename The data URL with embedded filename
     * @returns {String} The StackMob binary file MIME document string
     */
    generateStackMobBinaryDataForDataUrlWithFilename: function (dataUrlWithFilename) {
        var dataUrlComponents = /^data:([^,]+),([^,]+)$/.exec(dataUrlWithFilename),
            metadata = '',
            encodedData = '',
            contentType = '',
            contentEncoding = '',
            filename = '',
            metadataComponents;

        // Extract the metadata from the data URL
        if (dataUrlComponents.length > 0) {
            metadata = dataUrlComponents[1];
            encodedData = dataUrlComponents[2];
        }
        metadataComponents = metadata.split(';');

        // Iterate over the metadata components, attempting to classify them
        Ext.Array.each(metadataComponents, function (metadataComponent) {
            if (/.+\/.+/.test(metadataComponent)) {
                // MIME content types should be of the form "<type>/<subtype>"
                contentType = metadataComponent;
            } else if (/^stackmob-filename=.+$/.test(metadataComponent)) {
                // Our custom filename component is of the form "stackmob-filename=<filename>"
                filename = Ext.String.htmlDecode(metadataComponent.replace('stackmob-filename=', ''));
            } else if (metadataComponent.indexOf('=') == -1) {
                // Content encodings should probably not have an equals sign?
                contentEncoding = metadataComponent;
            }
        });

        return this.assembleStackMobFileData(filename, contentType, contentEncoding, encodedData);
    },

    /**
     * Produces a MIME document string describing a binary file, of the format that StackMob expects.
     * @param {String} filename The document filename
     * @param {String} contentType The MIME content type
     * @param {String} contentEncoding The MIME content encoding
     * @param {String} encodedData The encoded file data
     * @returns {string} A StackMob-compatible MIME document string
     */
    assembleStackMobFileData: function (filename, contentType, contentEncoding, encodedData) {
        // The expected format is:
        //     "Content-Type: <contentType>\nContent-Disposition: attachment; filename=<filename>\nContent-Transfer-Encodying: <contentEncoding>\n\n<encodedData>"
        return 'Content-Type: ' + contentType + '\nContent-Disposition: attachment; filename=' + filename + '\nContent-Transfer-Encoding: ' + contentEncoding + '\n\n' + encodedData;
    }
});